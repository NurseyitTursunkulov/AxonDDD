/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.testfordatabase.swagger.api;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;

import javax.validation.Valid;
import javax.validation.constraints.*;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-03-19T14:53:52.454350+01:00[Europe/Berlin]")
@Validated
@Api(value = "users", description = "the users API")
public interface UsersApi {

    default UsersApiDelegate getDelegate() {
        return new UsersApiDelegate() {};
    }

    /**
     * POST /users : Register a new user
     * Register a new user
     *
     * @param body Details of the new user to register (required)
     * @return OK (status code 201)
     *         or Unexpected error (status code 422)
     */
    @ApiOperation(value = "Register a new user", nickname = "createUser", notes = "Register a new user", response = UserResponseData.class, tags={ "User and Authentication", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "OK", response = UserResponseData.class),
        @ApiResponse(code = 422, message = "Unexpected error", response = GenericErrorModelData.class) })
    @PostMapping(
        value = "/users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserResponseData> createUser(@ApiParam(value = "Details of the new user to register" ,required=true )  @Valid @RequestBody NewUserRequestData body) {
        return getDelegate().createUser(body);
    }


    /**
     * POST /users/login : Existing user login
     * Login for existing user
     *
     * @param body Credentials to use (required)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Unexpected error (status code 422)
     */
    @ApiOperation(value = "Existing user login", nickname = "login", notes = "Login for existing user", response = UserResponseData.class, tags={ "User and Authentication", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserResponseData.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 422, message = "Unexpected error", response = GenericErrorModelData.class) })
    @PostMapping(
        value = "/users/login",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserResponseData> login(@ApiParam(value = "Credentials to use" ,required=true )  @Valid @RequestBody LoginUserRequestData body) {
        return getDelegate().login(body);
    }

}
