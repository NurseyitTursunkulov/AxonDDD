/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.testfordatabase.swagger.api;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;

import javax.validation.Valid;
import javax.validation.constraints.*;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-03-19T14:53:52.454350+01:00[Europe/Berlin]")
@Validated
@Api(value = "user", description = "the user API")
public interface UserApi {

    default UserApiDelegate getDelegate() {
        return new UserApiDelegate() {};
    }

    /**
     * GET /user : Get current user
     * Gets the currently logged-in user
     *
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Unexpected error (status code 422)
     */
    @ApiOperation(value = "Get current user", nickname = "getCurrentUser", notes = "Gets the currently logged-in user", response = UserResponseData.class, authorizations = {
        
        @Authorization(value = "Token")
         }, tags={ "User and Authentication", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserResponseData.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 422, message = "Unexpected error", response = GenericErrorModelData.class) })
    @GetMapping(
        value = "/user",
        produces = { "application/json" }
    )
    default ResponseEntity<UserResponseData> getCurrentUser() {
        return getDelegate().getCurrentUser();
    }


    /**
     * PUT /user : Update current user
     * Updated user information for current user
     *
     * @param body User details to update. At least **one** field is required. (required)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Unexpected error (status code 422)
     */
    @ApiOperation(value = "Update current user", nickname = "updateCurrentUser", notes = "Updated user information for current user", response = UserResponseData.class, authorizations = {
        
        @Authorization(value = "Token")
         }, tags={ "User and Authentication", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserResponseData.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 422, message = "Unexpected error", response = GenericErrorModelData.class) })
    @PutMapping(
        value = "/user",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserResponseData> updateCurrentUser(@ApiParam(value = "User details to update. At least **one** field is required." ,required=true )  @Valid @RequestBody UpdateUserRequestData body) {
        return getDelegate().updateCurrentUser(body);
    }

}
